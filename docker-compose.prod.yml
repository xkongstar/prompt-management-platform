version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: prompt-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - prompt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: prompt-redis-prod
    restart: always
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - prompt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: prompt-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 8000
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: info
    volumes:
      - backend_prod_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prompt-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: prompt-frontend-prod
    restart: always
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_APP_NAME: ${VITE_APP_NAME}
    depends_on:
      - backend
    networks:
      - prompt-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: prompt-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
      - nginx_prod_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - prompt-network

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_prod_logs:
    driver: local
  nginx_prod_logs:
    driver: local

networks:
  prompt-network:
    driver: bridge
